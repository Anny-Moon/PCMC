#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

#include "PolymerMC.h"
#include "PolymerObservable.h"
#include "Energy/Hamiltonian.h"
#include "Energy/LennardJones.h"

//#include "../include/ParamFileReader.h"
#include "../include/ParserParamFilePCMC.h"
#include "../include/MonteCarloParam.h"

using namespace std;
using namespace PCA;


int main(int np, char **p)
{	
    int N, tmpInt, number;
    int flag;
    double tmp;
    std::string etalon;
    FILE* logfp;
    time_t time1, time2;
//    double temperature, logT;
    
    
    logfp = fopen("log.dat","w");
    RandomGenerator::initialization(time(NULL));
    printf("Start main:\n");
    ParserParamFilePCMC parser("PCMC_parameters.dat");
    
    PolymerMC* polymer;
    
    Hamiltonian* hamiltonian;
    parser.createHamiltonian(&hamiltonian);
    hamiltonian->writeInParamFile(logfp);
    
    LennardJones* interaction;
    parser.createInteraction(&interaction);
    interaction->writeInParamFile(logfp);
    
    MonteCarloParam* monteCarloParam;
    parser.createMonteCarloParam(&monteCarloParam);
    monteCarloParam->writeInParamFile(logfp);
    
    
    
    double temperature;
    
    for(int k=0; k<monteCarloParam->getLoopsPerCore(); k++){
	parser.createPolymer(&polymer);
	polymer->setMonomerLengths(3.8);
	polymer->initWithRandomTaus();
	    if(k==0)
	    polymer->writeInParamFile(logfp);
    
	for(double t=monteCarloParam->getMaxLogT(); t>monteCarloParam->getMinLogT(); t-=monteCarloParam->getLogTstep()){
	    temperature = pow(10,t);
	    for(int i=0; i<monteCarloParam->getSweepsPerStep();i++){
		//printf("%i %g %i\n",k, t, i);
		polymer->updateAllSites(temperature, hamiltonian, interaction);
	    }
	
	}
    delete polymer;
    }
    
    fclose(logfp);
    delete interaction;
    delete hamiltonian;
    
    printf("Everything is OK!\n");
return 0;
}
    