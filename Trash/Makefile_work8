# Compilator name (for example could be mpicc instead)
CC:= g++

# Compilator flags
CFLAGS:= -std=c++11

# Libraries (can also include path to these libraries as -L/SOME_PATH)
LIB:= -lm

# Optimization (-O3 or -O2)
OPT:= -O3

# Directory for executables
BIN_DIR:= .

# Name for exectutable
PROGRAM = polymerMC

# Directories for .h files
INC_DIR1 = ./include
INC_DIR2 = ./include/Quantum

# Includes
LDLIBS:= -I$(INC_DIR1) -I$(INC_DIR2)

OBJ_DIR:= ./object

# Root directory for .cpp files
SRC_DIR:= ./source

# Source files
SRC :=  $(wildcard $(SRC_DIR)/*.cpp) $(wildcard $(SRC_DIR)/*/*.cpp)
# Object files
OBJ := $(addprefix $(OBJ_DIR)/,$(notdir $(SRC:.cpp=.o)))

# Files names of objects without directories name
OBJ_PURE := $(notdir $(OBJ))

all: $(PROGRAM)

# Linking
$(PROGRAM): $(OBJ_PURE)
	@echo "Generating executable file..." $(notdir $(PROGRAM))
	@$(CC) $(CFLAGS) $(OPT)  $(OBJ) -o $(PROGRAM) $(LIB)

# Compiling rule
define app_compile_template
 
 $(1)_OBJ = $$(addprefix $$(OBJ_DIR)/, $$(notdir $$(patsubst %.cpp, %.o, $(1))))
 $(1)_OBJ_PURE = $$(notdir $$($(1)_OBJ))

$$($(1)_OBJ_PURE): $(1)
	@echo "Compiling: " $$(addsuffix .cpp, $$(basename $$($(1)_OBJ_PURE)))
	@$$(CC) $$(CFLAGS) $$(OPT) -c $(1) -o $$($(1)_OBJ) $$(LDLIBS)
endef

# Compiling
$(foreach app, $(SRC), $(eval $(call app_compile_template,$(app))))


# Cleaning
clean:
	@echo "Cleaning: "
	rm -rf $(OBJ) $(PROGRAM)
print:
	@echo $(SRC)
	@echo $(OBJ)
	@echo $(addprefix ./object/, $(notdir $(patsubst %.cpp, %.o, $(SRC))))
