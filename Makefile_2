#compilator name (for example could be mpicc instead)
CC:=g++

CCFLAGS	:=-std=c++11
#LIBRARIES (can also include path to these libraries as -L/SOME_PATH)
LIB:=-lm

#Optimization (-O3 or -O2)
OPT:=-O3

#directory for executables
BIN_DIR:=.

#directory for .h files
INCLUDE_DIR:=./include

#List of include files
INCLUDE_FILES := $(wildcard $(addsuffix /*.h, $(INCLUDE_DIR)))
INCLUDE	 := $(addprefix -I, $(INCLUDE_DIRS))

#directory for .cpp files
SOURCE_DIR:=./source

#List of source files
SOURCE_FILES := $(wildcard $(addsuffix /*.cpp, $(SOURCE_DIR)))

#directory for .o files
OBJECT_DIR:=./object

SUFF :=
#List of object files
OBJECT_FILES := $(patsubst %.cpp, $(OBJECT_DIR)/$(SUFF)%.o, $(notdir $(SOURCE_FILES)))

#SOURCES = $(wildcard source/*.cpp)\
#	  $(wildcard source/Quantum/*.cpp)
	  
#OBJECTS = $(SOURCES:.cpp=.o)

#polymerMC : $(OBJECTS)
#	$(CC) $(OPT) -o  $@ $^ $(LIB)

APPS = $(notdir $(shell find ./* -type d))

all: $(APPS)

define app_compile_template
 $(1)_DIR  = ./$(1)
 $(1)_SRC  = $$(wildcard $$($(1)_DIR)/*.cpp)
 $(1)_INC  = $$(wildcard $$($(1)_DIR)/*.h)
$(1): $$(OBJECT_FILES) $$(INCLUDE_FILES)  $$($(1)_SRC) $$($(1)_INC)
    $$(CC) $$(CCFLAGS) $$(INCLUDE) -I$$($(1)_DIR)  $$(OBJECT_FILES) $$($(1)_SRC) $(LIBS) -o $$(BIN_DIR)/
endef


$(foreach app, $(APPS), $(eval $(call app_compile_template,$(app))))
#polymerMC : $(OBJECTS)
#	$(CC) $(OPT) -o polymerMC $(OBJECTS)

#cleaning
clean:
	rm -rf $(OBJECT_DIR)/*.o $(BIN_DIR)/polymerMC